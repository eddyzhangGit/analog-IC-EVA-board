import timeimport reimport serial    def set_condition_from_file(fnamme,ser):    with open(fnamme) as f:        line1 =0        for line in f:            items= line.split(',')            if line1 ==0:                line1 = 1                continue                        enabled = int(re.findall(r'\d+',items[3])[0])            #if enabled            if (enabled):                                if "PS" in items[0]:                                        Power_ID = int(re.findall(r'\d+',items[0])[0])                    voltage = float(items[1])                    print Power_ID,voltage                return items[2]    def get_offset(fnamme,name,channelID):    with open(fnamme) as f:        for line in f:            items= line.split(',')                        if (name+str(channelID)) == items[0]:                                print items[0],items[1],items[2],items[3]                return items[2]#get_offset(set_condition_from_file,"PS")#set_condition_from_file("Binary_load.csv","PS")#Pos_Bais_ID:  Int, 1-4#voltage : Double, 0 - 3#ser : serial port object, obtained from called connectdef Set_pos_bias(Pos_Bias_ID,voltage,ser):        DAC_Code = voltage/2.999 * 65535.0        # Message = "D" + DAC_iden + Channel_ID + DAC_CODE_inHex + '\r\n'    DAC_iden = "1"    Channel_ID = str(Pos_Bias_ID)    strHex = "%0.4X" % DAC_Code            message = "D"+ DAC_iden + Channel_ID +  strHex     print message    try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out        return 0    except:         return -1#Neg_Bais_ID:  Int, 1-2#voltage : Double, 0 - -2V#ser : serial port object, obtained from called connectdef Set_neg_bias(Neg_Bias_ID, voltage,ser):        DAC_Code = -voltage/2.999 * 65535.0    if Neg_Bias_ID ==2:        Neg_Bias_ID = 3        # Message = "D" + DAC_iden + Channel_ID + DAC_CODE_inHex + '\r\n'    DAC_iden = "3"    Channel_ID = str(Neg_Bias_ID)    strHex = "%0.4X" % DAC_Code            message = "D"+ DAC_iden + Channel_ID +  strHex    message = message.replace("-", "")    print message    try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out        return 0    except:         return -1def Set_current_voltage_bias(Neg_Bias_ID, voltage,ser):        DAC_Code = -voltage/2.999 * 65535.0        # Message = "D" + DAC_iden + Channel_ID + DAC_CODE_inHex + '\r\n'    DAC_iden = "2"    Channel_ID = str(Neg_Bias_ID)    strHex = "%0.4X" % DAC_Code            message = "D"+ DAC_iden + Channel_ID +  strHex    message = message.replace("-", "")    print message    try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out        return 0    except:         return -1#Current_Bais_ID:  Int, 1-4#current : Double, 0 -  1000, unit in uA#ser : serial port object, obtained from called connectdef Set_current_bias(Current_Bias_ID, current,ser):    #Current in uA, Convert to the DAC output voltage    voltage = current * (0.000001) * 200.0 * (4.99 + 45.3)/4.99    DAC_Code = voltage/2.999 * 65535.0        # Message = "D" + DAC_iden + Channel_ID + DAC_CODE_inHex + '\r\n'    DAC_iden = "2"    Channel_ID = str(Current_Bias_ID)    strHex = "%0.4X" % DAC_Code            message = "D" + DAC_iden + Channel_ID +  strHex     try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out                return 0    except:         return -1    #Power_supply_ID:  Int, 1-7,  7= power supply for level shifter#voltage : Double, 0.5-3, unit in V#ser : serial port object, obtained from called connectdef Set_power(Power_supply_ID, voltage,ser):    #Get value for R1    R1 = (voltage/0.5 - 1.0) * 500.0    #Get Tap values for R1    TAPS = R1/2500.0 * 255.0    # Message = "P" + POT_id + Chanel_ID_for_the_POT + Tap_num_in_hex + '\r\n'    POT_iden = str(Power_supply_ID)    Channel_ID = "1"    strHex = "%0.2X" % TAPS        message = "P"+ POT_iden + Channel_ID +  strHex     try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out        return 0    except:         return -1#Resistance : Resistance, 0-2500 , unit in Ohm#ser : serial port object, obtained from called connectdef Set_resistance_2k5(Resistance,ser):    #Get Taps from Resistance     TAPS = Resistance/2500.0 * 255.0    # Message = "P" + POT_id + Chanel_ID_for_the_POT + Tap_num_in_hex + '\r\n'    POT_iden = str(6)    Channel_ID = "2"    strHex = "%0.2X" % TAPS        message = "P" +  POT_iden + Channel_ID +  strHex     try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out                return 0    except:         return -1#Resistance : Resistance, 0-10000 , unit in Ohm#ser : serial port object, obtained from called connectdef Set_resistance_10k(Resistance,ser):    #Get Taps from Resistance     TAPS = Resistance/10000.0 * 255.0    # Message = P + POT_id + Chanel_ID_for_the_POT + Tap_num_in_hex + '\r\n'    POT_iden = str(7)    Channel_ID = "2"    strHex = "%0.2X" % TAPS        message = "P"+ POT_iden + Channel_ID +  strHex     try:        ser.write(message + '\r\n')        time.sleep(0.5)        out = ""        while ser.inWaiting() > 0:            out += ser.read(1)        print out                    return 0    except:         return -1    #Helper functiondef convert_adc_to_voltage(ADC_data_raw):    return ADC_data_raw/16384.0 * 3.0    #Helper functiondef read_ADC(ADC_num,ser):    strHex = "%0.2d" % ADC_num    message = "A"+strHex     try:        ser.write(message + '\r\n')        return 0    except:         return -1def read_ADC_voltage(ADC_num,ser):    strHex = "%0.2d" % ADC_num    message = "A"+strHex    ser.write(message + '\r\n')    time.sleep(0.5)    out = ""    while ser.inWaiting() > 0:        out += ser.read(1)    ADC_data_raw = int(out[3:8])    return convert_adc_to_voltage(ADC_data_raw)#Power_supply_ID : 1-7, 7 = the power supply for Level shifter#ser : serial port object, obtained from called connect#return voltagedef Get_power_voltage(Power_supply_ID, ser):    ADC_num = 0        if Power_supply_ID == 1:        ADC_num = 1    elif Power_supply_ID == 2:        ADC_num = 3    elif Power_supply_ID == 3:        ADC_num = 5    elif Power_supply_ID == 4:        ADC_num = 7    elif Power_supply_ID == 5:        ADC_num = 12    elif Power_supply_ID == 6:        ADC_num = 14    elif Power_supply_ID == 7:        ADC_num = 15    else:        return -1        read_ADC(ADC_num,ser)    #Wait for 0.5 second and read back the value    time.sleep(0.5)    out = ""    while ser.inWaiting() > 0:        out += ser.read(1)            print out    #make sure the ADC value belong to the ADC_num call    ADC_ID = int(out[1:3])    if ADC_ID == ADC_num:        ADC_data_raw = int(out[3:8])        return convert_adc_to_voltage(ADC_data_raw)    else:        return 1#Current_Bias_ID : 1-4,#ser : serial port object, obtained from called connect#return current in uA def Get_Bias_current(Current_Bias_ID,ser):    ADC_num = 0    if Current_Bias_ID == 1:        ADC_num = 21    elif Current_Bias_ID == 2:        ADC_num = 22    elif Current_Bias_ID == 3:        ADC_num = 20            elif Current_Bias_ID == 4:        ADC_num = 23    else:        return -1        read_ADC(ADC_num,ser)    #Wait for 0.5 second and read back the value    time.sleep(0.5)    out = ""    while ser.inWaiting() > 0:        out += ser.read(1)            #make sure the ADC value belong to the ADC_num call    ADC_ID = int(out[1:3])    if ADC_ID == ADC_num:        ADC_data_raw = int(out[4:10])        ADC_voltage = convert_adc_to_voltage(ADC_data_raw)        gain =  1+54.9/4.99        current = ADC_voltage / gain / 200.0        return current * 1000000.0   #Return current in mA    else:        return 1        #Power_supply_ID : 1-6, There is no current measurement for the power supply for Level shifter#ser : serial port object, obtained from called connect#return current in mA def Get_power_current(Power_supply_ID,ser):    ADC_num = 0    R_sense = R_sense_low    if Power_supply_ID == 1:        ADC_num = 1    elif Power_supply_ID == 2:        ADC_num = 3    elif Power_supply_ID == 3:        ADC_num = 5    elif Power_supply_ID == 4:        ADC_num = 7    elif Power_supply_ID == 5:        ADC_num = 12        R_sense = R_sense_high    elif Power_supply_ID == 6:        ADC_num = 14        R_sense = R_sense_high    else:        return -1        read_ADC(Power_supply_ID,ser)    #Wait for 0.5 second and read back the value    time.sleep(0.5)    out = ""    while ser.inWaiting() > 0:        out += ser.read(1)            #make sure the ADC value belong to the ADC_num call    ADC_ID = int(out[1:3])    if ADC_ID == ADC_num:        ADC_data_raw = int(out[4:10])        ADC_voltage = convert_adc_to_voltage(ADC_data_raw)        current = ADC_voltage/100.0/R_sense        return current * 1000   #Return current in mA    else:        return 1    #port_num : Serial port name#Windows : From device manager etc COM4#MAC : /dev/cu.lpss-serial2, etc, example path is needed, you can find it by typing "ls /dev/cu.*", at the terminal#Return ser : serial port object, use to communitate with Boarddef connect(port_num):    ser = serial.Serial(        port = port_num,        baudrate=9600,        parity=serial.PARITY_NONE,        stopbits=serial.STOPBITS_ONE,        bytesize=serial.EIGHTBITS    )    ser.isOpen()    return ser#data :  String, in Hex#Polarity : 1 = Rising/Falling, 0 = Falling/Rising#Phase : 1 = Sample/Setup,  0 = Setup/Sample#MSB : 1 = Most Significant bit first,  0 = Least Significant bit first#Bitrate : 0 - 500000 #ser : serial port object, obtained from called connectdef SPI_SEND(data,Polarity,Phase,MSB,BitRate, ser):    strHex = "%0.6d" % Bitrate    message = "GSM"+  strHex + str(MSB) + str(Phase) + str(Polarity)        print message    try:        ser.write(message + '\r\n')        time.sleep(0.1)        Message = "GSD" + data        ser.write(message + '\r\n')        time.sleep(0.1)            except:         return -1    out = ""    while ser.inWaiting() > 0:        out += ser.read(1)    return 0	#ser: serial port object, obtained from called connect	def SPI_disable (ser):    message = "GST"	    try:        ser.write(message + '\r\n')        return 0    except:         return -1		#freqency : 0-30000,#ser : serial port object, obtained from called connectdef set_frequency(frequency,ser):    #Message = "G" + "F" "Frequency    strHex = "%0.6d" % frequency    message = "GF"+  strHex     try:        ser.write(message + '\r\n')        return 0    except:         return -1#cycles : 0-3900,#ser : serial port object, obtained from called connectdef set_input_clock_cycles (cycles, ser):     #Message = "G" + "F" "Frequency    strHex = "%0.4d" % cycles    message = "GC"+  strHex     try:        ser.write(message + '\r\n')        return 0    except:         return -1#gpio_id: gpio identification (1-16)#direction: output (0) or input (1)#clock_source: board clock (0) or DUT clock (1)#capture_mode: rising (0), falling (1), input clock from DUT (2), asynchronous and uses board clock(3), output pin (4), output clock from board (5)#num_packets: sets the number of data packets#data: set output data in bits (ie. 101110101010...), maximum 120 bits#ser: serial port object, obtained from called connectdef set_gpio(gpio_id,direction,clock_source,capture_mode,num_packets,data,ser):    str_gpio_id = "%0.2d" % (gpio_id-1)    str_direction = str(direction)    str_clock_source = str(clock_source)    str_capture_mode = str(capture_mode)    str_num_packets = "%0.2d" % num_packets    message = "GL" +str_gpio_id+ str_direction+str_clock_source+str_capture_mode+str_num_packets + data    try:        ser.write(message + '\r\n')        return 0    except:         return -1#data: additional data for previously set gpio in bits, max 120 bits#ser: serial port object, obtained from called connectdef load_extra_packets(data,ser):    message = "GLC" + data    try:        ser.write(message + '\r\n')        return 0    except:         return -1#ser: serial port object, obtained from called connectdef gpio_Begin(ser):    message = "GB"    try:        ser.write(message + '\r\n')        return 0    except:         return -1#gpio_id: input gpio identification that you wish to read from#ser: serial port object, obtained from called connect    def read_gpio_input (gpio_id, ser):    str_gpio_id = "%0.2d" % (gpio_id-1)	    message = "GR" + str_gpio_id	    try:        ser.write(message + '\r\n')        return 0    except:         return -1